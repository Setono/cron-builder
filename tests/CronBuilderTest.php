<?php

declare(strict_types=1);

namespace Setono\CronBuilder;

use PHPUnit\Framework\TestCase;
use Setono\CronBuilder\VariableResolver\ExprVariableResolver;

/**
 * @covers \Setono\CronBuilder\CronBuilder
 */
final class CronBuilderTest extends TestCase
{
    /**
     * @test
     */
    public function it_builds(): void
    {
        $cronBuilder = new CronBuilder([
            'source' => __DIR__ . '/cronjobs',
        ]);
        $cronBuilder->addVariableResolver(new ExprVariableResolver());

        $expected = <<<CRON
###> Automatically generated by Setono Cron Builder - Do not edit ###
0 0 * * * php test-script.php
0 0 * * * php test-script.php
0 0 * * * php test-script.php # Executes a great command
0 0 * * * php test-script.php test
###< Automatically generated by Setono Cron Builder - Do not edit ###
CRON;

        $actual = $cronBuilder->build([
            'env' => 'test',
        ]);

        self::assertSame($expected, $actual);
    }

    /**
     * @test
     */
    public function it_merges(): void
    {
        $cronBuilder = new CronBuilder([
            'source' => __DIR__ . '/cronjobs',
        ]);
        $cronBuilder->addVariableResolver(new ExprVariableResolver());

        $newCron = $cronBuilder->build([
            'env' => 'test',
        ]);

        $oldCron = <<<CRON
0 1 * * * php another-script.php

###> Automatically generated by Setono Cron Builder - Do not edit ###
0 0 * * * php first-script.php
###< Automatically generated by Setono Cron Builder - Do not edit ###

1 0 * * * php a-third-script.php
CRON;

        $expected = <<<CRON
0 1 * * * php another-script.php

###> Automatically generated by Setono Cron Builder - Do not edit ###
0 0 * * * php test-script.php
0 0 * * * php test-script.php
0 0 * * * php test-script.php # Executes a great command
0 0 * * * php test-script.php test
###< Automatically generated by Setono Cron Builder - Do not edit ###

1 0 * * * php a-third-script.php
CRON;

        $actual = $cronBuilder->merge($oldCron, $newCron);

        self::assertSame($expected, $actual);
    }

    /**
     * @test
     */
    public function it_merges_2(): void
    {
        $cronBuilder = new CronBuilder([
            'source' => __DIR__ . '/cronjobs',
        ]);
        $cronBuilder->addVariableResolver(new ExprVariableResolver());

        $newCron = $cronBuilder->build([
            'env' => 'test',
        ]);

        $oldCron = <<<CRON
0 1 * * * php another-script.php
1 0 * * * php a-third-script.php
CRON;

        $expected = <<<CRON
0 1 * * * php another-script.php
1 0 * * * php a-third-script.php
###> Automatically generated by Setono Cron Builder - Do not edit ###
0 0 * * * php test-script.php
0 0 * * * php test-script.php
0 0 * * * php test-script.php # Executes a great command
0 0 * * * php test-script.php test
###< Automatically generated by Setono Cron Builder - Do not edit ###
CRON;

        $actual = $cronBuilder->merge($oldCron, $newCron);

        self::assertSame($expected, $actual);
    }
}
